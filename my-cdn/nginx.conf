# Nginxのワーカープロセスの数を1に設定します
worker_processes  1;

# イベント処理に関する設定ブロックを開始します
events {
    # 1つのワーカープロセスが同時に処理できる最大接続数を1024に設定します
    worker_connections  1024;
}

# HTTPサーバーに関する設定ブロックを開始します
http {
    # プロキシキャッシュの設定: パス、階層、ゾーン名(MY_CDN_CACHE, 10MB)、10分間アクセスのないキャッシュは削除
    # levels: ハッシュ値の末尾から、まず1文字、次に2文字を使ってサブディレクトリを作る
    # KEY: http://host.docker.internal:8000/test.json が、キャッシュキーの元（文字列）です。
    #（Vary ヘッダーがある場合は、この文字列に ja や en などの値も連結されます）
    # ハッシュ値 (File Name) Nginx はその「本当のキャッシュキー」の文字列全体を MD5 でハッシュ化し、063b0896e2e4394d08775c165d4d8f48 という32文字のファイル名を生成します。
    proxy_cache_path  /tmp/nginx_cache levels=1:2 keys_zone=MY_CDN_CACHE:10m inactive=10m;

    # 1. 'cdn_log' という名前のカスタムログ形式を定義
    log_format cdn_log '[$time_local] $remote_addr - "$request" '
                       'status $status ($body_bytes_sent) '
                       'cache $upstream_cache_status '
                       'req_header_cache_control "$http_cache_control" '
                       'req_header_pragma "$http_pragma"';

    # 2. access_log で 'cdn_log' 形式を使うよう指定
    access_log /dev/stdout cdn_log;
    error_log /dev/stderr info;
    
    # 仮想サーバー(Webサイト)の設定ブロックを開始します
    server {
        # このサーバーが8080番ポートで接続を待ち受けるように設定します
        listen 8080;
        
        # このサーバーブロックが処理するドメイン名（ホスト名）をlocalhostに設定します
        server_name localhost;
        
        # ルートURL ("/") へのリクエストを処理する設定ブロックを開始します
        location / {
            proxy_pass http://host.docker.internal:8000;
            # リクエストを http://localhost:8000 (バックエンドサーバー) に転送します
            # proxy_pass の指示に従い、リクエストされたパスを http://localhost:8000 にくっつけます。
            # proxy_pass http://localhost:8000;
            
            # "MY_CDN_CACHE" という名前のキャッシュゾーンを使用してキャッシュを有効にします
            proxy_cache MY_CDN_CACHE;
            
            # HTTPステータスコード200 (成功) のレスポンスを60秒間キャッシュします
            proxy_cache_valid 200 60s;
            
            # レスポンスヘッダーにX-Cache-Status (HIT, MISSなど) を追加します
            add_header X-Cache-Status $upstream_cache_status;
        }
    }
}